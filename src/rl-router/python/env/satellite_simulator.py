# env/satellite_simulator.py

from python.utils.state_builder import (
    StateBuilder, 
    MAX_NEIGHBORS,             
    MAX_SYSTEM_LATENCY_MS,     
)
from typing import Dict, Any, Tuple, Optional, List
import numpy as np

# Gi·∫£ ƒë·ªãnh c√°c h·∫±ng s·ªë tr·ªçng s·ªë
DEFAULT_WEIGHTS = {
    'goal': 10.0,
    'drop': 100.0,
    'latency': -5.0,        # Ph·∫°t cho ƒë·ªô tr·ªÖ hop cao
    'latency_violation': -50.0, # Ph·∫°t v∆∞·ª£t ng∆∞·ª°ng QoS
    'utilization': 2.0,     # Th∆∞·ªüng t√†i nguy√™n th·∫•p
    'bandwidth': 1.0,       # Th∆∞·ªüng bƒÉng th√¥ng kh·∫£ d·ª•ng cao
    'reliability': 3.0,     # Th∆∞·ªüng ƒë·ªô tin c·∫≠y cao
    'fspl': -0.1,           # Ph·∫°t suy hao cao
    'hop_cost': -1.0        # üí° PH·∫†T M·ªöI: Chi ph√≠ c·ªë ƒë·ªãnh cho m·ªói hop (khuy·∫øn kh√≠ch ƒë∆∞·ªùng ng·∫Øn)
}

class SatelliteEnv:
    """M√¥i tr∆∞·ªùng m√¥ ph·ªèng hop ƒë·ªãnh tuy·∫øn trong m·∫°ng v·ªá tinh."""

    def __init__(self, state_builder: StateBuilder, weights: Optional[Dict[str, float]] = None):
        """
        Kh·ªüi t·∫°o v√† thi·∫øt l·∫≠p c√°c ch·ªâ s·ªë b·∫Øt ƒë·∫ßu c·ªë ƒë·ªãnh c·ªßa Vector S.
        """
        self.state_builder = state_builder
        self.weights = DEFAULT_WEIGHTS.copy()
        if weights:
            self.weights.update(weights)

        self.current_packet_state: Dict[str, Any] = {} 
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë b·∫Øt ƒë·∫ßu c·ªë ƒë·ªãnh c·ªßa Vector S (ƒê·ªòNG)
        # S = V_G (10) + V_P (8) + V_C (6) + V_N (28)
        self.NEIGHBOR_SLOT_SIZE = 7
        self.START_INDEX_VN = 10 + 8 + 6 # 24

    def reset(self, initial_packet_data: Dict[str, Any]) -> np.ndarray:
        """Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu (Vector S)"""
        self.current_packet_state = initial_packet_data
        return self.state_builder.get_state_vector(initial_packet_data)

    def step(self, action_index: int, neighbor_id: str, new_packet_data: Dict[str, Any]) -> Tuple[np.ndarray, float, bool]:
        """
        Th·ª±c hi·ªán h√†nh ƒë·ªông, tr·∫£ v·ªÅ (next_state, reward, done)
        """
        reward = self._calculate_reward(action_index, new_packet_data) 
        
        self.current_packet_state = new_packet_data
        next_state = self.state_builder.get_state_vector(new_packet_data)
        done = self._is_terminal(new_packet_data)
        
        return next_state, reward, done

    def _is_terminal(self, packet_data: Dict[str, Any]) -> bool:
        """Ki·ªÉm tra g√≥i tin ƒë√£ ƒë·∫øn ƒë√≠ch ho·∫∑c b·ªã drop / TTL h·∫øt"""
        is_at_dest = packet_data.get('currentHoldingNodeId') == packet_data.get('stationDest')
        is_dropped = packet_data.get('dropped', False) or packet_data.get('ttl', 0) <= 0
        return is_at_dest or is_dropped

    # ================== H√†m Reward T·ªëi ∆∞u (FIXED) ==================

    def _calculate_reward(self, action_index: int, packet_data: Dict[str, Any]) -> float:
        """
        T√≠nh reward c√¢n b·∫±ng.
        """
        w = self.weights
        
        # --- 1. Goal / Drop (Ph·∫ßn th∆∞·ªüng/Ph·∫°t cu·ªëi c√πng) ---
        if packet_data.get('currentHoldingNodeId') == packet_data.get('stationDest'):
            return w.get('goal', 10.0)
        
        if packet_data.get('dropped', False) or packet_data.get('ttl', 0) <= 0:
            return -w.get('drop', 100.0)

        # --- L·∫•y Vector S c≈© v√† Tr√≠ch xu·∫•t Neighbor Slot ---
        # NOTE: get_state_vector ƒë∆∞·ª£c g·ªçi tr√™n current_packet_state (tr·∫°ng th√°i TR∆Ø·ªöC khi hop)
        prev_S = self.state_builder.get_state_vector(self.current_packet_state)
        
        SLOT_START = self.START_INDEX_VN + (action_index * self.NEIGHBOR_SLOT_SIZE)

        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa h√†nh ƒë·ªông
        if action_index >= MAX_NEIGHBORS or (SLOT_START + self.NEIGHBOR_SLOT_SIZE) > len(prev_S):
             # Ph·∫°t n·∫∑ng h∆°n n·∫øu ch·ªçn padding slot
             return -w.get('drop', 100.0) / 2 

        # Tr√≠ch xu·∫•t 7 ch·ªâ s·ªë (ƒê√É CHU·∫®N H√ìA) c·ªßa slot ƒë∆∞·ª£c ch·ªçn
        slot_metrics = prev_S[SLOT_START:SLOT_START + self.NEIGHBOR_SLOT_SIZE]
        
        # √Ånh x·∫° c√°c ch·ªâ s·ªë (Indices)
        is_op = slot_metrics[0]
        total_latency_ratio = slot_metrics[1]
        avail_bw_ratio = slot_metrics[2]
        dest_util_ratio = slot_metrics[3]
        loss_rate_neighbor = slot_metrics[4]
        fspl_ratio = slot_metrics[6]
        
        # --- B·∫ÆT ƒê·∫¶U T√çNH TO√ÅN REWARD ---
        reward = 0.0
        
        # 1. üí° PH·∫†T CHI PH√ç HOP (SOLUTION M·ªöI)
        # Ph·∫°t c·ªë ƒë·ªãnh cho m·ªói hop ƒë·ªÉ Agent ∆∞u ti√™n ƒë∆∞·ªùng ng·∫Øn h∆°n.
        reward += w.get('hop_cost', -1.0) 
        
        # 2. Ph·∫°t ƒê·ªô tr·ªÖ (Tr√°nh Vi ph·∫°m QoS)
        max_lat = packet_data.get('serviceQoS', {}).get('maxLatencyMs', MAX_SYSTEM_LATENCY_MS)
        curr_delay = packet_data.get('accumulatedDelayMs', 0.0)
        
        if curr_delay / max_lat > 0.9:
             reward += w.get('latency_violation', -50.0)

        # Ph·∫°t/Th∆∞·ªüng d·ª±a tr√™n ƒê·ªô tr·ªÖ Hop (V√¨ total_latency_ratio c√†ng cao c√†ng x·∫•u)
        reward += w.get('latency', -5.0) * total_latency_ratio
        
        # 3. C√¢n b·∫±ng T√†i nguy√™n
        reward += w.get('bandwidth', 1.0) * avail_bw_ratio
        reward += w.get('utilization', 2.0) * (1.0 - dest_util_ratio) # Th∆∞·ªüng cho utilization th·∫•p
        
        # 4. ƒê·ªô tin c·∫≠y
        reward += w.get('reliability', 3.0) * (1.0 - loss_rate_neighbor) # Th∆∞·ªüng khi loss rate th·∫•p
        reward += w.get('fspl', -0.1) * fspl_ratio # Ph·∫°t suy hao cao
        
        # 5. Tr·∫°ng th√°i ho·∫°t ƒë·ªông
        reward += w.get('operational', 5.0) * is_op 
        
        return float(reward)