# pages/2_VisualizationPage.py

import streamlit as st
import pandas as pd
from pyvis.network import Network
import streamlit.components.v1 as components
from streamlit_autorefresh import st_autorefresh
import sys

# ------------------- PH·∫¶N 1: C√ÄI ƒê·∫∂T V√Ä IMPORT -------------------
sys.path.insert(0, '.')
try:
    from config.mongo_config import get_collection
    from service.LinkMetric_Calculator import calculate_single_link_metric, update_all_link_metrics_in_db
except ImportError as e:
    st.error(f"L·ªói Import: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c th∆∞ m·ª•c.")
    st.stop()

st.set_page_config(page_title="Network Visualization", layout="wide")

# ------------------- PH·∫¶N 2: C√ÅC H√ÄM X·ª¨ L√ù -------------------

@st.cache_data(ttl=10)
def load_network_data():
    """T·∫£i ƒë·ªìng th·ªùi d·ªØ li·ªáu v·ªÅ Nodes v√† Links t·ª´ MongoDB."""
    try:
        nodes_collection = get_collection("nodes")
        links_collection = get_collection("link_metrics")
        nodes_list = list(nodes_collection.find({}))
        links_list = list(links_collection.find({"isLinkActive": True}))
        nodes_df = pd.DataFrame(nodes_list)
        links_df = pd.DataFrame(links_list)
        if not nodes_df.empty:
            nodes_df['active'] = nodes_df['status'].apply(lambda s: s.get('active', False) if isinstance(s, dict) else False)
        return nodes_df, links_df
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi ho·∫∑c l·∫•y d·ªØ li·ªáu t·ª´ MongoDB: {e}")
        return pd.DataFrame(), pd.DataFrame()

def generate_network_graph(nodes_df: pd.DataFrame, links_df: pd.DataFrame) -> str:
    """T·∫°o ƒë·ªì th·ªã m·∫°ng t∆∞∆°ng t√°c v√† tr·∫£ v·ªÅ chu·ªói HTML."""
    net = Network(height="750px", width="100%", bgcolor="#0E1117", font_color=True, notebook=True, cdn_resources='in_line')
    net.set_options("""
    var options = { "physics": { "enabled": true, "barnesHut": { "gravitationalConstant": -20000, "centralGravity": 0.15, "springLength": 200 }, "solver": "barnesHut" } }
    """)
    
    node_styles = {
        "GROUND_STATION": {"shape": "triangle", "color": "#00BFFF", "size": 30},
        "LEO_SATELLITE": {"shape": "star", "color": "#FFD700", "size": 25},
        "MEO_SATELLITE": {"shape": "ellipse", "color": "#90EE90", "size": 35},
        "GEO_SATELLITE": {"shape": "square", "color": "#FF6347", "size": 40},
        "INACTIVE": {"color": "#4A4A4A"}
    }

    # **V·∫Ω c√°c NODE (ƒê·ªânh)**
    active_node_ids = set(nodes_df[nodes_df['active'] == True]['nodeId'])
    for _, node in nodes_df.iterrows():
        node_id, is_active, node_type = node["nodeId"], node["active"], node["type"]
        
        # --- S·ª¨A L·ªñI T·∫†I ƒê√ÇY ---
        # 1. L·∫•y style g·ªëc. D√πng .copy() ƒë·ªÉ kh√¥ng s·ª≠a ƒë·ªïi dict g·ªëc.
        style = node_styles.get(node_type, {"shape": "dot", "color": "grey", "size": 20}).copy()
        
        # 2. Ghi ƒë√® m√†u n·∫øu node kh√¥ng ho·∫°t ƒë·ªông
        if not is_active:
            style['color'] = node_styles["INACTIVE"]["color"]

        title = f"""
        <b>ID:</b> {node_id}<br>
        <b>T√™n:</b> {node['nodeName']}<br>
        <b>Lo·∫°i:</b> {node_type}
        """
        
        # 3. Gi·ªù ƒë√¢y, ch·ªâ c·∫ßn unpack dict 'style' ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho√†n ch·ªânh
        net.add_node(node_id, label=node["nodeName"], title=title, **style)
        # --- K·∫æT TH√öC S·ª¨A L·ªñI ---

    # **V·∫Ω c√°c LINK (C·∫°nh)**
    for _, link in links_df.iterrows():
        src, dst = link["sourceNodeId"], link["destinationNodeId"]
        if src not in active_node_ids or dst not in active_node_ids:
            continue
        score = link.get("linkScore", 0)
        if score > 80: color, width = "#00FF00", 3.5
        elif score > 60: color, width = "#ADFF2F", 2.5
        elif score > 40: color, width = "#FFA500", 1.5
        else: color, width = "#FF0000", 1
        link_title = f"""<b>Link:</b> {src} ‚Üî {dst}<hr><b>ƒêi·ªÉm ch·∫•t l∆∞·ª£ng:</b> {score:.1f}<br><b>ƒê·ªô tr·ªÖ:</b> {link.get('latencyMs', 0):.2f} ms<br><b>BƒÉng th√¥ng:</b> {link.get('currentAvailableBandwidthMbps', 0):.0f} Mbps"""
        net.add_edge(src, dst, title=link_title, color=color, width=width)

    try:
        file_path = "network_graph_live.html"
        net.save_graph(file_path)
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        return f"<p>L·ªói khi t·∫°o ƒë·ªì th·ªã: {e}</p>"

# ------------------- PH·∫¶N 3: GIAO DI·ªÜN CH√çNH STREAMLIT -------------------
st_autorefresh(interval=10000, key="visual_refresher")

st.title("üõ∞Ô∏è Dashboard Tr·ª±c quan h√≥a M·∫°ng l∆∞·ªõi")
st.markdown("ƒê·ªì th·ªã bi·ªÉu di·ªÖn c√°c **Node** v√† ch·∫•t l∆∞·ª£ng k·∫øt n·ªëi (**LinkMetric**) theo th·ªùi gian th·ª±c.")

with st.sidebar:
    st.header("‚öôÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn")
    if st.button("C·∫≠p nh·∫≠t To√†n b·ªô Link Metrics v√†o DB", use_container_width=True):
        with st.spinner("ƒêang t√≠nh to√°n l·∫°i t·∫•t c·∫£ c√°c li√™n k·∫øt m·∫°ng..."):
            update_all_link_metrics_in_db()
            st.cache_data.clear()
        st.success("ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng d·ªØ li·ªáu Link Metrics v√†o DB!")
        st.rerun()
    st.divider()
    st.header("üî¨ Ki·ªÉm tra Li√™n k·∫øt Tr·ª±c ti·∫øp")
    nodes_df, links_df = load_network_data()
    active_nodes_list = sorted(nodes_df[nodes_df['active'] == True]['nodeId'].tolist()) if not nodes_df.empty else []
    if not active_nodes_list:
        st.warning("Kh√¥ng c√≥ node n√†o ƒëang ho·∫°t ƒë·ªông.")
    else:
        source_id = st.selectbox("Ch·ªçn Node Ngu·ªìn", options=active_nodes_list)
        dest_id = st.selectbox("Ch·ªçn Node ƒê√≠ch", options=active_nodes_list, index=min(1, len(active_nodes_list)-1))
        if st.button("Ki·ªÉm tra Ch·∫•t l∆∞·ª£ng", use_container_width=True, type="primary"):
            if source_id == dest_id:
                st.warning("Vui l√≤ng ch·ªçn hai node kh√°c nhau.")
            elif source_id is None or dest_id is None:
                st.warning("Vui l√≤ng ch·ªçn c·∫£ hai node.")
            else:
                result = calculate_single_link_metric(source_id, dest_id)
                st.session_state.link_check_result = result
    if 'link_check_result' in st.session_state and st.session_state.link_check_result:
        result = st.session_state.link_check_result
        st.divider()
        st.subheader(f"K·∫øt qu·∫£: {result['sourceNodeId']} ‚Üî {result['destinationNodeId']}")
        if not result.get("isLinkActive", True):
            st.error(f"‚ùå Li√™n k·∫øt kh√¥ng ho·∫°t ƒë·ªông: {result.get('reason')}")
        else:
            score = result.get('linkScore', 0)
            st.metric("ƒêi·ªÉm ch·∫•t l∆∞·ª£ng", f"{score:.1f} / 100", f"{'T·ªët' if score > 60 else 'Y·∫øu'}", delta_color=("normal" if score > 60 else "inverse"))
            col1, col2 = st.columns(2)
            col1.metric("ƒê·ªô tr·ªÖ", f"{result.get('latencyMs', 0):.1f} ms")
            col2.metric("Kho·∫£ng c√°ch", f"{result.get('distanceKm', 0):.0f} km")

if nodes_df.empty:
    st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu node. Vui l√≤ng ch·∫°y script `init_Node.py`.")
else:
    active_count = int(nodes_df['active'].sum())
    st.info(f"ƒêang hi·ªÉn th·ªã **{len(nodes_df)}** node ({active_count} ho·∫°t ƒë·ªông) v√† **{len(links_df)}** li√™n k·∫øt.")
    if links_df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu LinkMetric. H√£y nh·∫•n n√∫t 'C·∫≠p nh·∫≠t To√†n b·ªô...' ·ªü sidebar.")
    graph_html = generate_network_graph(nodes_df, links_df)
    with st.container(border=True):
        components.html(graph_html, height=800, scrolling=True)