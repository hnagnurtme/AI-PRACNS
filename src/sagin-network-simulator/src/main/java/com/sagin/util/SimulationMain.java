package com.sagin.util;

import com.sagin.core.INetworkManagerService;
import com.sagin.core.INodeService;
import com.sagin.core.service.NodeService;
import com.sagin.configuration.ServiceConfiguration;
import com.sagin.model.NodeInfo;
import com.sagin.core.ILinkManagerService;
import com.sagin.routing.RoutingEngine;
import com.sagin.repository.INodeRepository; // C·∫ßn thi·∫øt cho Seeder
import com.sagin.seeding.NodeSeeder;       // Import NodeSeeder

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

/**
 * ƒêi·ªÉm kh·ªüi ch·∫°y ch√≠nh c·ªßa ·ª©ng d·ª•ng m√¥ ph·ªèng Node.
 * L·ªõp n√†y th·ª±c hi·ªán Dependency Injection v√† kh·ªüi t·∫°o lu·ªìng m·∫°ng ch√≠nh.
 */
public class SimulationMain {

    private static final Logger logger = LoggerFactory.getLogger(SimulationMain.class);

    public static void main(String[] args) {
        
        if (args.length < Initializer.REQUIRED_ARGS_COUNT) {
            logger.error("L·ªói: Thi·∫øu tham s·ªë kh·ªüi t·∫°o. C·∫ßn √≠t nh·∫•t {} tham s·ªë.", Initializer.REQUIRED_ARGS_COUNT);
            System.exit(1);
        }
        
        try {
            // 1. L·∫§Y C·∫§U H√åNH D·ªäCH V·ª§ (SINGLETON)
            ServiceConfiguration config = ServiceConfiguration.getInstance();
            
            // 2. L·∫§Y C√ÅC DEPENDENCY C·∫¶N THI·∫æT
            INetworkManagerService networkManager = config.getNetworkManagerService();
            RoutingEngine routingEngine = config.getRoutingEngine();
            ILinkManagerService linkManager = config.getLinkManagerService();
            INodeRepository nodeRepository = config.getNodeRepository(); // üëà L·∫•y Repository cho Seeder

            // 3. TH·ª∞C HI·ªÜN SEEDING D·ªÆ LI·ªÜU
            NodeSeeder seeder = new NodeSeeder(nodeRepository);
            // Ch·∫°y Seeder: ƒê·∫∑t 'true' n·∫øu mu·ªën ghi ƒë√® Database m·ªói l·∫ßn ch·∫°y (d√πng cho testing)
            seeder.seedInitialNodes(false); 

            // 4. Kh·ªüi t·∫°o Node Info t·ª´ tham s·ªë d√≤ng l·ªánh
            NodeInfo currentNodeInfo = Initializer.initializeNodeFromArgs(args);
            
            logger.info("=================================================");
            logger.info("Node ID: {} | Type: {}", currentNodeInfo.getNodeId(), currentNodeInfo.getNodeType());
            logger.info("V·ªã tr√≠: {}", currentNodeInfo.getPosition().toString());
            logger.info("BW Max: {} Mbps", currentNodeInfo.getCurrentBandwidth());
            logger.info("=================================================");

            // 5. C·∫•u h√¨nh ban ƒë·∫ßu c·ªßa Network Manager 
            Map<String, NodeInfo> currentInstanceConfig = new HashMap<>();
            currentInstanceConfig.put(currentNodeInfo.getNodeId(), currentNodeInfo);
            
            // initializeNetwork s·∫Ω t·∫£i d·ªØ li·ªáu t·ª´ DB (v·ª´a ƒë∆∞·ª£c seeder ƒë·∫©y l√™n) V√Ä th√™m Node hi·ªán t·∫°i
            networkManager.initializeNetwork(currentInstanceConfig); 

            // 6. Kh·ªüi t·∫°o Node Service (TH·ª∞C HI·ªÜN DEPENDENCY INJECTION)
            INodeService nodeService = new NodeService(
                currentNodeInfo, 
                networkManager,
                routingEngine,   
                linkManager       
            );
            
            // 7. ƒêƒÉng k√Ω Node v√†o Registry v√† b·∫Øt ƒë·∫ßu m√¥ ph·ªèng
            networkManager.registerActiveNode(currentNodeInfo.getNodeId(), nodeService);
            nodeService.startSimulationLoop(); 

        } catch (IllegalArgumentException e) {
            logger.error("L·ªói tham s·ªë kh·ªüi ƒë·ªông: {}", e.getMessage());
            System.exit(1);
        } catch (Exception e) {
            logger.error("L·ªói nghi√™m tr·ªçng x·∫£y ra trong qu√° tr√¨nh kh·ªüi t·∫°o ·ª©ng d·ª•ng:", e);
            System.exit(1);
        }
    }
}