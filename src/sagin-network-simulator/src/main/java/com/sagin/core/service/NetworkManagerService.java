package com.sagin.core.service;

import com.sagin.core.INetworkManagerService;
import com.sagin.core.INodeService;
import com.sagin.model.NodeInfo;
import com.sagin.model.Packet;
import com.sagin.repository.INodeRepository; 

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * L·ªõp tri·ªÉn khai INetworkManagerService. 
 * Qu·∫£n l√Ω v√† ƒëi·ªÅu ph·ªëi t·∫•t c·∫£ NodeService ƒëang ch·∫°y.
 * L·ªõp n√†y ho·∫°t ƒë·ªông nh∆∞ m·ªôt Registry v√† API Gateway cho m·∫°ng m√¥ ph·ªèng.
 */
public class NetworkManagerService implements INetworkManagerService {

    private static final Logger logger = LoggerFactory.getLogger(NetworkManagerService.class);

    // L∆∞u tr·ªØ t·∫•t c·∫£ NodeService ƒëang ho·∫°t ƒë·ªông (Node ID -> NodeService Object)
    private final Map<String, INodeService> activeNodeServices;
    // L∆∞u tr·ªØ t·∫•t c·∫£ NodeInfo (Database V·ªã tr√≠ trong b·ªô nh·ªõ)
    private final Map<String, NodeInfo> networkNodesInfo;
    
    // DEPENDENCY: Repository ƒë·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ DB
    private final INodeRepository nodeRepository; 

    public NetworkManagerService(INodeRepository nodeRepository) { // üëà S·ª¨A: Nh·∫≠n Repository
        this.activeNodeServices = new ConcurrentHashMap<>();
        this.networkNodesInfo = new ConcurrentHashMap<>();
        this.nodeRepository = nodeRepository; 
        logger.info("NetworkManagerService ƒë√£ kh·ªüi t·∫°o.");
    }

    @Override
    public void initializeNetwork(Map<String, NodeInfo> initialNodeConfigs) {
        logger.info("Kh·ªüi t·∫°o c·∫•u tr√∫c m·∫°ng: B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu Node...");
        
        Map<String, NodeInfo> dbConfigs = nodeRepository.loadAllNodeConfigs();
        
        this.networkNodesInfo.putAll(dbConfigs);
        
        this.networkNodesInfo.putAll(initialNodeConfigs);

        logger.info("T·∫£i th√†nh c√¥ng {} Node (Bao g·ªìm c·∫£ Node ƒëang ch·∫°y) v√†o Registry.", 
                    this.networkNodesInfo.size());
    }
    
    @Override
    public void registerActiveNode(String serviceId, INodeService nodeService) {
        if (!activeNodeServices.containsKey(serviceId)) {
            activeNodeServices.put(serviceId, nodeService);
            logger.info("Node {} ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng v√†o NetworkManager.", serviceId);
        } else {
            logger.warn("Node {} ƒë√£ t·ªìn t·∫°i trong danh s√°ch Node ho·∫°t ƒë·ªông (ƒê√£ ƒëƒÉng k√Ω l·∫°i).", serviceId);
        }
    }

    @Override
    public void transferPacket(Packet packet, String destNodeId) {
        INodeService destinationNode = activeNodeServices.get(destNodeId);
        
        if (destinationNode != null) {
            // G·ªçi ph∆∞∆°ng th·ª©c receivePacket() c·ªßa Node ƒë√≠ch
            logger.info("Chuy·ªÉn giao: G√≥i {} t·ª´ {} -> {}", 
                        packet.getPacketId(), packet.getCurrentHoldingNodeId(), destNodeId);
            // K·ªπ thu·∫≠t g·ªçi h√†m n√†y l√† c√°ch m√¥ ph·ªèng Network Hand-off gi·ªØa c√°c lu·ªìng
            destinationNode.receivePacket(packet);
            
            // NOTE: C·∫ßn c√≥ logic c·∫≠p nh·∫≠t v·ªã tr√≠/tr·∫°ng th√°i l√™n DB t·∫°i ƒë√¢y n·∫øu d√πng Firebase
            // nodeRepository.updateNodeInfo(packet.getCurrentHoldingNodeId(), latestNodeInfo);
        } else {
            logger.warn("L·ªñI CHUY·ªÇN GIAO: Node ƒë√≠ch {} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông.", destNodeId);
            packet.markDropped();
        }
    }

    @Override
    public NodeInfo getNodeInfo(String nodeId) {
        // Cung c·∫•p th√¥ng tin c·ªßa c√°c node kh√°c trong m·∫°ng (cho kh√°m ph√° l√°ng gi·ªÅng)
        return networkNodesInfo.get(nodeId);
    }

    @Override
    public void startSimulation() {
        logger.info("Network Manager ƒë√£ s·∫µn s√†ng.");
    }
}