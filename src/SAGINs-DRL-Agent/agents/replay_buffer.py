# agents/replay_buffer.py
import numpy as np
import random
from typing import Dict, Any, List, Tuple

class InMemoryReplayBuffer:
    """B·ªô ƒë·ªám replay buffer trong b·ªô nh·ªõ"""
    
    def __init__(self, capacity: int = 100000):
        # X√ìA d√≤ng n√†y: super().__init__(capacity)
        self.capacity = capacity
        self.memory: List[Tuple[np.ndarray, str, float, np.ndarray]] = []
        self.position = 0
        print(f"üîß ReplayBuffer initialized: capacity={capacity}")
    
    def store_experience(self, experience: Dict):
        """L∆∞u experience m·ªõi"""
        try:
            exp_tuple = (
                np.array(experience['stateVectorS'], dtype=np.float32),
                experience['actionTakenA'],
                experience['rewardR'],
                np.array(experience['nextStateVectorSPrime'], dtype=np.float32)
            )
            
            if len(self.memory) < self.capacity:
                self.memory.append(exp_tuple)
            else:
                self.memory[self.position] = exp_tuple
            self.position = (self.position + 1) % self.capacity
            
            # Debug log m·ªói 1000 experiences
            if len(self.memory) % 1000 == 0:
                print(f"üíæ Buffer size: {len(self.memory)}/{self.capacity}")
                
        except Exception as e:
            print(f"‚ùå Error storing experience: {e}")

    def sample(self, batch_size: int) -> List[Tuple[np.ndarray, str, float, np.ndarray]]:
        """L·∫•y batch experiences ng·∫´u nhi√™n"""
        if len(self.memory) < batch_size:
            if len(self.memory) > 0:
                # N·∫øu buffer ch∆∞a ƒë·ªß batch_size, tr·∫£ v·ªÅ t·∫•t c·∫£
                return self.memory.copy()
            return []
        
        try:
            samples = random.sample(self.memory, batch_size)
            return samples
        except Exception as e:
            print(f"‚ùå Error sampling from buffer: {e}")
            return []

    def get_size(self) -> int:
        """Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng experiences hi·ªán c√≥"""
        return len(self.memory)

    def get_capacity(self) -> int:
        """Tr·∫£ v·ªÅ dung l∆∞·ª£ng t·ªëi ƒëa"""
        return self.capacity

    def clear(self):
        """X√≥a to√†n b·ªô buffer"""
        self.memory.clear()
        self.position = 0
        print("üßπ Replay buffer cleared")

    def get_stats(self) -> Dict[str, Any]:
        """L·∫•y th·ªëng k√™ v·ªÅ buffer"""
        if not self.memory:
            return {"size": 0, "rewards": []}
        
        rewards = [exp[2] for exp in self.memory]  # reward l√† ph·∫ßn t·ª≠ th·ª© 2
        return {
            "size": len(self.memory),
            "reward_mean": np.mean(rewards) if rewards else 0,
            "reward_std": np.std(rewards) if rewards else 0,
            "reward_min": min(rewards) if rewards else 0,
            "reward_max": max(rewards) if rewards else 0
        }