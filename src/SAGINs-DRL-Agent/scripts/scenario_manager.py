# scripts/scenario_manager.py
from typing import Dict, Any, List
from utils.static_data import (
    BASE_NODE_INFO, 
    BASE_LINK_METRICS, 
    STATIC_LINK_VARIANTS, 
    calculate_link_score_simplified, 
    NUM_VARIANTS,
    create_static_link_variants
) 
import copy
import random

# --- H√ÄM ·ª®NG D·ª§NG C·∫¨P NH·∫¨T ---

def apply_link_updates(link_key: str, updates: Dict[str, Any]):
    """
    √Åp d·ª•ng c·∫≠p nh·∫≠t cho LinkMetrics C∆† S·ªû v√† T·∫§T C·∫¢ c√°c bi·∫øn th·ªÉ.
    """
    try:
        source_id, dest_id = link_key.split('-')
    except ValueError:
        print(f"L·ªñI: Link key '{link_key}' kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng 'Source-Dest'.")
        return

    # 1. C·∫≠p nh·∫≠t BASE_LINK_METRICS
    for link in BASE_LINK_METRICS:
        if link.get('sourceNodeId') == source_id and link.get('destinationNodeId') == dest_id:
            link.update(updates)
            link['linkScore'] = calculate_link_score_simplified(link)
            break
            
    # 2. C·∫≠p nh·∫≠t T·∫§T C·∫¢ c√°c bi·∫øn th·ªÉ trong STATIC_LINK_VARIANTS
    for variant in STATIC_LINK_VARIANTS:
        for link in variant:
            if link.get('sourceNodeId') == source_id and link.get('destinationNodeId') == dest_id:
                link.update(updates)
                link['linkScore'] = calculate_link_score_simplified(link)
    
    print(f"   [Link C·∫≠p nh·∫≠t] ƒê√£ √°p d·ª•ng {link_key}. Score m·ªõi: {link.get('linkScore', 'N/A'):.2f}")


def apply_node_updates(node_id: str, updates: Dict[str, Any]):
    """√Åp d·ª•ng c·∫≠p nh·∫≠t cho NodeInfo C∆† S·ªû (BASE_NODE_INFO)."""
    if node_id in BASE_NODE_INFO:
        current_data = BASE_NODE_INFO[node_id]
        current_data.update(updates) 
        
        util = current_data.get('resourceUtilization', 'N/A')
        bat = current_data.get('batteryChargePercent', 'N/A')
        print(f"   [Node C·∫≠p nh·∫≠t] Node {node_id}: T·∫£i={util}, Pin={bat}%")


# --- ƒê·ªäNH NGHƒ®A V√Ä TH·ª∞C THI K·ªäCH B·∫¢N ---

def run_scenario(scenario_type: str):
    """Th·ª±c hi·ªán c√°c k·ªãch b·∫£n m·∫°ng kh√°c nhau b·∫±ng c√°ch ghi ƒë√® d·ªØ li·ªáu tƒ©nh."""
    
    if scenario_type != 'BASELINE':
        run_scenario('BASELINE')
        
    print(f"\n--- √ÅP D·ª§NG K·ªäCH B·∫¢N: {scenario_type} ---")
    
    if scenario_type == 'CONGESTION_LINK_AB':
        # üö® TƒÇNG C∆Ø·ªúNG ƒê·ªò L·ªñI: BW ch·ªâ c√≤n 1 Mbps
        apply_link_updates("NodeA-NodeB", {"latencyMs": 500.0, "currentAvailableBandwidthMbps": 1.0, "packetLossRate": 0.99}) 
        apply_node_updates("NodeB", {"resourceUtilization": 0.95, "currentPacketCount": 900, "nodeProcessingDelayMs": 50.0})
        print("C·∫¢NH B√ÅO: K·ªãch b·∫£n QoS FAILS (T·∫Øc ngh·∫Ωn KH·∫ÆC NGHI·ªÜT). DRL Agent ph·∫£i ch·ªçn A->C.")

    elif scenario_type == 'SEVERE_WEATHER_AC':
        # K·ªãch b·∫£n 2: ·∫¢nh h∆∞·ªüng th·ªùi ti·∫øt (suy hao) l√™n Link A->C
        apply_link_updates("NodeA-NodeC", {"linkAttenuationDb": 35.0, "packetLossRate": 0.90, "currentAvailableBandwidthMbps": 10.0})
        apply_node_updates("NodeA", {"weather": "SEVERE_STORM"})
        print("C·∫¢NH B√ÅO: Link NodeA->NodeC g·∫ßn nh∆∞ kh√¥ng kh·∫£ d·ª•ng do th·ªùi ti·∫øt x·∫•u.")
        
    elif scenario_type == 'NODE_C_OVERLOAD':
        # K·ªãch b·∫£n 3: Node x·ª≠ l√Ω trung gian (Node C) b·ªã qu√° t·∫£i v√† s·∫Øp h·∫øt pin
        apply_node_updates("NodeC", {"resourceUtilization": 0.99, "currentPacketCount": 990, "batteryChargePercent": 15.0, "nodeProcessingDelayMs": 20.0})
        print("C·∫¢NH B√ÅO: NodeC ƒëang qu√° t·∫£i v√† pin y·∫øu. Agent ph·∫£i tr√°nh NodeC.")
        
    elif scenario_type == 'LINK_FAIL_AB':
        # K·ªãch b·∫£n 4: M·∫•t Link Ho√†n to√†n (Hard Fail)
        apply_link_updates("NodeA-NodeB", {"isLinkActive": False, "currentAvailableBandwidthMbps": 0.0, "packetLossRate": 1.0})
        apply_link_updates("NodeB-NodeA", {"isLinkActive": False, "currentAvailableBandwidthMbps": 0.0, "packetLossRate": 1.0})
        print("C·∫¢NH B√ÅO: Link NodeA<->NodeB ƒê√É H·ªéNG. Agent b·∫Øt bu·ªôc ph·∫£i ch·ªçn A->C.")

    elif scenario_type == 'EXTREME_ATTENUATION_AC':
        # K·ªãch b·∫£n 5: Suy hao c·ª±c ƒë·ªô (M√¥i tr∆∞·ªùng r·∫•t x·∫•u t·∫°i tr·∫°m m·∫∑t ƒë·∫•t A)
        apply_link_updates("NodeA-NodeC", {"linkAttenuationDb": 35.0, "packetLossRate": 0.95, "currentAvailableBandwidthMbps": 5.0})
        print("C·∫¢NH B√ÅO: Link A->C g·∫ßn nh∆∞ kh√¥ng th·ªÉ d√πng ƒë∆∞·ª£c do suy hao.")

    elif scenario_type == 'BASELINE':
        # K·ªãch b·∫£n 6: Kh√¥i ph·ª•c v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu (Tr·∫°ng th√°i m·∫°ng t·ªëi ∆∞u)
        print("Kh√¥i ph·ª•c tr·∫°ng th√°i m·∫°ng v·ªÅ Baseline.")
        
        global STATIC_LINK_VARIANTS
        base_links_copy = copy.deepcopy(BASE_LINK_METRICS)
        STATIC_LINK_VARIANTS.clear() 
        STATIC_LINK_VARIANTS.extend(create_static_link_variants(base_links_copy, NUM_VARIANTS))
        
        for node_id in BASE_NODE_INFO.keys():
            BASE_NODE_INFO[node_id]['resourceUtilization'] = 0.15
            BASE_NODE_INFO[node_id]['currentPacketCount'] = 40
            BASE_NODE_INFO[node_id]['batteryChargePercent'] = 90.0
            BASE_NODE_INFO[node_id]['isOperational'] = True
            BASE_NODE_INFO[node_id]['weather'] = 'CLEAR'